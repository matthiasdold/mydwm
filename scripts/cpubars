#!/bin/sh

# Module showing CPU load as a changing bars.
# Just like in polybar.
# Each bar represents amount of load on one core since
# last run.
#
# Color code with \x0b, \x0c, \x0d, ... etc being the indeces of the colors
# array from within the config.h of dwm
# static const char *colors[][3]      = {
# 	/*               fg         bg         border   */
# 	[SchemeNorm] = { normfgcolor, normbgcolor, normbordercolor },
# 	[SchemeCol1] = { warnfgcolor, normbgcolor, normbordercolor },
# 	[SchemeCol2] = { critfgcolor, normbgcolor, normbordercolor },
# 	[SchemeSel]  = { selfgcolor,  selbgcolor,  selbordercolor  },
# };

# Cache in tmpfs to improve speed and reduce SSD load
cache=/tmp/cpubarscache

case $BLOCK_BUTTON in
	2) setsid -f "$TERMINAL" -e htop ;;
	3) notify-send "🪨 CPU load module" "Each bar represents
one CPU core";;
	6) "$TERMINAL" -e "$EDITOR" "$0" ;;
esac

# id total idle
stats=$(awk '/cpu[0-9]+/ {printf "%d %d %d\n", substr($1,4), ($2 + $3 + $4 + $5), $5 }' /proc/stat)
[ ! -f $cache ] && echo "$stats" > "$cache"
old=$(cat "$cache")
printf ""
echo "$stats" | while read -r row; do
	id=${row%% *}
	rest=${row#* }
	total=${rest%% *}
	idle=${rest##* }

	case "$(echo "$old" | awk '{if ($1 == id)
		printf "%d\n", (1 - (idle - $3)  / (total - $2))*100 /12.5}' \
		id="$id" total="$total" idle="$idle")" in
        "0") printf "▁";;
		"1") printf "\x0b▂\x0b";;
		"2") printf "\x0b▃\x0b";;
		"3") printf "\x0b▄\x0b";;
		"4") printf "\x0b▅\x0b";;
		"5") printf "\x0c▆\x0b";;
		"6") printf "\x0c▇\x0b";;
		"7") printf "\x0d█\x0b";;
		"8") printf "\x0d█\x0b";;

		#"0") printf "`tput setaf 2` ▁";;
		#"1") printf "`tput setaf 2` ▂";;
		#"2") printf "`tput setaf 2` ▃";;
		#"3") printf "`tput setaf 3` ▄";;
		#"4") printf "`tput setaf 3` ▅";;
		#"5") printf "`tput setaf 3` ▆";;
		#"6") printf "`tput setaf 1` ▇";;
		#"7") printf "`tput setaf 1` █";;
		#"8") printf "`tput setaf 1` █";;
	esac
done; printf "\\n"
echo "$stats" > "$cache"
